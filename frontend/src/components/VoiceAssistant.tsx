import React, { useState, useEffect, useRef } from 'react';
import { Button } from '@/components/ui/button';
import { Card } from '@/components/ui/card';
import { Phone, PhoneOff, Mic, MicOff, MessageSquare, Globe, Volume2 } from 'lucide-react';
import { cn } from '@/lib/utils';

interface VoiceAssistantProps {
  isOpen: boolean;
  onToggle: () => void;
}

interface Message {
  type: 'user' | 'assistant';
  content: string;
  timestamp: Date;
  language?: string;
}

// Language options
const LANGUAGES = [
  { code: 'hi', name: 'рд╣рд┐рдВрджреА', flag: 'ЁЯЗоЁЯЗ│' },
  { code: 'te', name: 'р░др▒Жр░▓р▒Бр░Чр▒Б', flag: 'ЁЯЗоЁЯЗ│' },
  { code: 'ta', name: 'родрооро┐ро┤рпН', flag: 'ЁЯЗоЁЯЗ│' },
  { code: 'en', name: 'English', flag: 'ЁЯЗ║ЁЯЗ╕' },
  { code: 'bn', name: 'ржмрж╛ржВрж▓рж╛', flag: 'ЁЯЗоЁЯЗ│' },
  { code: 'gu', name: 'ркЧрлБркЬрк░рк╛ркдрлА', flag: 'ЁЯЗоЁЯЗ│' }
];

// Embedded Financial Assistant Logic
class SimpleFinancialAssistant {
  private apiKey: string;
  private currentLanguage: string;
  private isListening: boolean = false;
  private recognition: any = null;
  private synthesis: any = null;

  constructor(apiKey: string, defaultLanguage: string = 'hi') {
    this.apiKey = apiKey;
    this.currentLanguage = defaultLanguage;
    this.synthesis = window.speechSynthesis;
    this.initializeSpeechRecognition();
  }

  private initializeSpeechRecognition() {
    if ('webkitSpeechRecognition' in window || 'SpeechRecognition' in window) {
      const SpeechRecognition = (window as any).SpeechRecognition || (window as any).webkitSpeechRecognition;
      this.recognition = new SpeechRecognition();
      this.recognition.continuous = false;
      this.recognition.interimResults = true;
      this.recognition.lang = this.getRecognitionLanguage(this.currentLanguage);
    }
  }

  private getRecognitionLanguage(code: string): string {
    const langCodes: { [key: string]: string } = {
      'hi': 'hi-IN', 'te': 'te-IN', 'ta': 'ta-IN', 'bn': 'bn-IN',
      'gu': 'gu-IN', 'en': 'en-IN'
    };
    return langCodes[code] || 'hi-IN';
  }

  async chat(message: string, language: string): Promise<string> {
    // For demo purposes, return mock responses based on language and content
    const responses = this.getMockResponses(message, language);
    
    // Simulate API delay
    await new Promise(resolve => setTimeout(resolve, 1000));
    
    return responses;
  }

  private getMockResponses(message: string, language: string): string {
    const lowerMessage = message.toLowerCase();
    
    // Financial keywords detection
    const savingsKeywords = ['save', 'saving', 'рдмрдЪрдд', 'рдмрдЪрд╛рдирд╛', 'р░Жр░жр░╛', 'роЪрпЗрооро┐рокрпНрокрпБ'];
    const creditKeywords = ['credit', 'score', 'рдХреНрд░реЗрдбрд┐рдЯ', 'р░╕р▒Нр░Хр▒Лр░░р▒Н', 'роХро┐ро░рпЖроЯро┐роЯрпН'];
    const loanKeywords = ['loan', 'рд▓реЛрди', 'р░▓р▒Лр░ир▒Н', 'роХроЯройрпН'];
    const investKeywords = ['invest', 'investment', 'рдирд┐рд╡реЗрд╢', 'р░кр▒Жр░Яр▒Нр░Яр▒Бр░мр░бр░┐', 'роорпБродро▓рпАроЯрпБ'];

    const responses: { [key: string]: { [key: string]: string[] } } = {
      savings: {
        hi: [
          'рдкреИрд╕реЗ рдмрдЪрд╛рдиреЗ рдХреЗ рд▓рд┐рдП 50-30-20 рдирд┐рдпрдо рдЕрдкрдирд╛рдПрдВ: 50% рдЬрд░реВрд░рддреЛрдВ рдХреЗ рд▓рд┐рдП, 30% рдЪрд╛рд╣рддреЛрдВ рдХреЗ рд▓рд┐рдП, 20% рдмрдЪрдд рдХреЗ рд▓рд┐рдПред',
          'рдорд╣реАрдиреЗ рдХреА рд╢реБрд░реБрдЖрдд рдореЗрдВ рд╣реА рдмрдЪрдд рдХрд░реЗрдВ, рдорд╣реАрдиреЗ рдХреЗ рдЕрдВрдд рдореЗрдВ рдирд╣реАрдВред',
          'рдЫреЛрдЯреА рдорд╛рддреНрд░рд╛ рдореЗрдВ рднреА рд╣рд░ рджрд┐рди рдмрдЪрдд рдХрд░рдирд╛ рдмреЗрд╣рддрд░ рд╣реИред'
        ],
        te: [
          'р░бр░мр▒Нр░мр▒Б р░Жр░жр░╛ р░Ър▒Зр░пр░бр░╛р░ир░┐р░Хр░┐ 50-30-20 р░ир░┐р░пр░ор░В р░кр░╛р░Яр░┐р░Вр░Ър░Вр░бр░┐: 50% р░Ер░╡р░╕р░░р░╛р░▓р░Хр▒Б, 30% р░Хр▒Лр░░р░┐р░Хр░▓р░Хр▒Б, 20% р░╕р▒Зр░╡р░┐р░Вр░Чр▒Нр░╕р▒НтАМр░Хр▒Б.',
          'р░ир▒Жр░▓ р░ор▒Кр░жр░Яр▒Нр░▓р▒Лр░ир▒З р░╕р▒Зр░╡р░┐р░Вр░Чр▒Нр░╕р▒Н р░Ър▒Зр░пр░Вр░бр░┐, р░ир▒Жр░▓ р░Ър░┐р░╡р░░р▒Нр░▓р▒Л р░Хр░╛р░жр▒Б.',
          'р░др░Хр▒Нр░Хр▒Бр░╡ р░ор▒Кр░др▒Нр░др░Вр░▓р▒Л р░Ер░пр░┐р░ир░╛ р░кр▒Нр░░р░др░┐р░░р▒Лр░Ьр▒В р░Жр░жр░╛ р░Ър▒Зр░пр░бр░В р░ор░Вр░Ър░┐р░жр░┐.'
        ],
        en: [
          'Follow the 50-30-20 rule: 50% for needs, 30% for wants, 20% for savings.',
          'Save at the beginning of the month, not at the end.',
          'Even small daily savings can make a big difference over time.'
        ]
      },
      credit: {
        hi: [
          'рдХреНрд░реЗрдбрд┐рдЯ рд╕реНрдХреЛрд░ 300-900 рдХреЗ рдмреАрдЪ рд╣реЛрддрд╛ рд╣реИред 750+ рдЕрдЪреНрдЫрд╛ рдорд╛рдирд╛ рдЬрд╛рддрд╛ рд╣реИред',
          'рд╕рдордп рдкрд░ рдмрд┐рд▓ рднреБрдЧрддрд╛рди рдХрд░реЗрдВ рдФрд░ рдХреНрд░реЗрдбрд┐рдЯ рдЙрдкрдпреЛрдЧ 30% рд╕реЗ рдХрдо рд░рдЦреЗрдВред',
          'рдирд┐рдпрдорд┐рдд рд░реВрдк рд╕реЗ рдЕрдкрдирд╛ рдХреНрд░реЗрдбрд┐рдЯ рд░рд┐рдкреЛрд░реНрдЯ рдЪреЗрдХ рдХрд░реЗрдВред'
        ],
        te: [
          'р░Хр▒Нр░░р▒Жр░бр░┐р░Яр▒Н р░╕р▒Нр░Хр▒Лр░░р▒Н 300-900 р░ор░зр▒Нр░п р░Йр░Вр░Яр▒Бр░Вр░жр░┐. 750+ р░ор░Вр░Ър░┐р░жр░┐р░Чр░╛ р░кр░░р░┐р░Чр░гр░┐р░Вр░Ър░мр░бр▒Бр░др▒Бр░Вр░жр░┐.',
          'р░╕р░ор░пр░╛р░ир░┐р░Хр░┐ р░мр░┐р░▓р▒Нр░▓р▒Бр░▓р▒Б р░Ър▒Жр░▓р▒Нр░▓р░┐р░Вр░Ър░Вр░бр░┐ р░ор░░р░┐р░пр▒Б р░Хр▒Нр░░р▒Жр░бр░┐р░Яр▒Н р░╡р░┐р░ир░┐р░пр▒Лр░Чр░В 30% р░Хр░Вр░Яр▒З р░др░Хр▒Нр░Хр▒Бр░╡р░Чр░╛ р░Йр░Вр░Ър░Вр░бр░┐.',
          'р░Хр▒Нр░░р░ор░В р░др░кр▒Нр░кр░Хр▒Бр░Вр░бр░╛ р░ор▒А р░Хр▒Нр░░р▒Жр░бр░┐р░Яр▒Н р░░р░┐р░кр▒Лр░░р▒Нр░Яр▒Н р░др░ир░┐р░Цр▒А р░Ър▒Зр░пр░Вр░бр░┐.'
        ],
        en: [
          'Credit score ranges from 300-900. 750+ is considered good.',
          'Pay bills on time and keep credit utilization below 30%.',
          'Check your credit report regularly for accuracy.'
        ]
      },
      loan: {
        hi: [
          'рд╣реЛрдо рд▓реЛрди рдХреЗ рд▓рд┐рдП рдЕрдЪреНрдЫрд╛ рдХреНрд░реЗрдбрд┐рдЯ рд╕реНрдХреЛрд░, рд╕реНрдерд┐рд░ рдЖрдп рдФрд░ рдбрд╛рдЙрди рдкреЗрдореЗрдВрдЯ рдЪрд╛рд╣рд┐рдПред',
          'рдЕрд▓рдЧ-рдЕрд▓рдЧ рдмреИрдВрдХреЛрдВ рдХреА рдмреНрдпрд╛рдЬ рджрд░реЛрдВ рдХреА рддреБрд▓рдирд╛ рдХрд░реЗрдВред',
          'EMI рдЖрдкрдХреА рдорд╛рд╕рд┐рдХ рдЖрдп рдХрд╛ 40% рд╕реЗ рдЬреНрдпрд╛рджрд╛ рдирд╣реАрдВ рд╣реЛрдирд╛ рдЪрд╛рд╣рд┐рдПред'
        ],
        te: [
          'р░╣р▒Лр░ор▒Н р░▓р▒Лр░ир▒Н р░Хр▒Лр░╕р░В р░ор░Вр░Ър░┐ р░Хр▒Нр░░р▒Жр░бр░┐р░Яр▒Н р░╕р▒Нр░Хр▒Лр░░р▒Н, р░╕р▒Нр░ер░┐р░░р░ор▒Ир░и р░Жр░жр░╛р░пр░В р░ор░░р░┐р░пр▒Б р░бр▒Мр░ир▒Н р░кр▒Зр░ор▒Жр░Вр░Яр▒Н р░Ер░╡р░╕р░░р░В.',
          'р░╡р░┐р░╡р░┐р░з р░мр▒Нр░пр░╛р░Вр░Хр▒Бр░▓ р░╡р░бр▒Нр░бр▒А р░░р▒Зр░Яр▒Нр░▓р░ир▒Б р░кр▒Лр░▓р▒Нр░Ър░Вр░бр░┐.',
          'EMI р░ор▒А р░ир▒Жр░▓р░╡р░╛р░░р▒А р░Жр░жр░╛р░пр░Вр░▓р▒Л 40% р░Хр░Вр░Яр▒З р░Ор░Хр▒Нр░Хр▒Бр░╡ р░Йр░Вр░бр░Хр▒Вр░бр░жр▒Б.'
        ],
        en: [
          'For home loans, you need good credit score, stable income, and down payment.',
          'Compare interest rates across different banks.',
          'EMI should not exceed 40% of your monthly income.'
        ]
      },
      investment: {
        hi: [
          'SIP рдХреЗ рдЬрд░рд┐рдП рдореНрдпреВрдЪреБрдЕрд▓ рдлрдВрдб рдореЗрдВ рдирд┐рд╡реЗрд╢ рдХрд░рдирд╛ рд╢реБрд░реБрдЖрддреА рд▓реЛрдЧреЛрдВ рдХреЗ рд▓рд┐рдП рдЕрдЪреНрдЫрд╛ рд╣реИред',
          'рдЕрдкрдиреЗ рдирд┐рд╡реЗрд╢ рдХреЛ рдЕрд▓рдЧ-рдЕрд▓рдЧ рдЬрдЧрд╣ рдмрд╛рдВрдЯреЗрдВ - рдбрд╛рдпрд╡рд░реНрд╕рд┐рдлрд┐рдХреЗрд╢рди рдХрд░реЗрдВред',
          'рд▓рдВрдмреА рдЕрд╡рдзрд┐ рдХреЗ рд▓рд┐рдП рдирд┐рд╡реЗрд╢ рдХрд░реЗрдВ рдФрд░ рдзреИрд░реНрдп рд░рдЦреЗрдВред'
        ],
        te: [
          'SIP р░жр▒Нр░╡р░╛р░░р░╛ р░ор▒Нр░пр▒Вр░Ър▒Бр░╡р░▓р▒Н р░лр░Вр░бр▒Нр░▓р░▓р▒Л р░кр▒Жр░Яр▒Нр░Яр▒Бр░мр░бр░┐ р░кр▒Жр░Яр▒Нр░Яр░бр░В р░кр▒Нр░░р░╛р░░р░Вр░нр░Хр▒Бр░▓р░Хр▒Б р░ор░Вр░Ър░┐р░жр░┐.',
          'р░ор▒А р░кр▒Жр░Яр▒Нр░Яр▒Бр░мр░бр░┐р░ир░┐ р░╡р░┐р░╡р░┐р░з р░Ър▒Лр░Яр▒Нр░▓ р░╡р░┐р░нр░Ьр░┐р░Вр░Ър░Вр░бр░┐ - р░бр▒Ир░╡р░░р▒Нр░╕р░┐р░лр░┐р░Хр▒Зр░╖р░ир▒Н р░Ър▒Зр░пр░Вр░бр░┐.',
          'р░жр▒Ар░░р▒Нр░Шр░Хр░╛р░▓р░┐р░Х р░кр▒Жр░Яр▒Нр░Яр▒Бр░мр░бр░┐ р░Ър▒Зр░пр░Вр░бр░┐ р░ор░░р░┐р░пр▒Б р░Ур░кр░┐р░Х р░кр░Яр▒Нр░Яр░Вр░бр░┐.'
        ],
        en: [
          'SIP in mutual funds is good for beginners to start investing.',
          'Diversify your investments across different asset classes.',
          'Invest for the long term and be patient with your investments.'
        ]
      }
    };

    // Determine response category
    let category = 'general';
    if (savingsKeywords.some(keyword => lowerMessage.includes(keyword))) category = 'savings';
    else if (creditKeywords.some(keyword => lowerMessage.includes(keyword))) category = 'credit';
    else if (loanKeywords.some(keyword => lowerMessage.includes(keyword))) category = 'loan';
    else if (investKeywords.some(keyword => lowerMessage.includes(keyword))) category = 'investment';

    // Get response in appropriate language
    const categoryResponses = responses[category];
    if (categoryResponses && categoryResponses[language]) {
      const responseArray = categoryResponses[language];
      return responseArray[Math.floor(Math.random() * responseArray.length)];
    }

    // Fallback responses
    const fallbackResponses: { [key: string]: string } = {
      hi: 'рдореИрдВ рдЖрдкрдХреА рд╡рд┐рддреНрддреАрдп рд╕рд╣рд╛рдпрддрд╛ рдХреЗ рд▓рд┐рдП рдпрд╣рд╛рдВ рд╣реВрдВред рдХреГрдкрдпрд╛ рдмрдЪрдд, рдирд┐рд╡реЗрд╢, рдпрд╛ рд▓реЛрди рдХреЗ рдмрд╛рд░реЗ рдореЗрдВ рдкреВрдЫреЗрдВред',
      te: 'р░ир▒Зр░ир▒Б р░ор▒А р░Жр░░р▒Нр░ер░┐р░Х р░╕р░╣р░╛р░пр░В р░Хр▒Лр░╕р░В р░Зр░Хр▒Нр░Хр░б р░Йр░ир▒Нр░ир░╛р░ир▒Б. р░жр░пр░Ър▒Зр░╕р░┐ р░╕р▒Зр░╡р░┐р░Вр░Чр▒Нр░╕р▒Н, р░кр▒Жр░Яр▒Нр░Яр▒Бр░мр░бр░┐ р░▓р▒Зр░жр░╛ р░▓р▒Лр░ир▒Н р░Чр▒Бр░░р░┐р░Вр░Ър░┐ р░Ер░бр░Чр░Вр░бр░┐.',
      ta: 'роиро╛ройрпН роЙроЩрпНроХро│рпН роиро┐родро┐ роЙродро╡ро┐роХрпНроХро╛роХ роЗроЩрпНроХрпЗ роЗро░рпБроХрпНроХро┐ро▒рпЗройрпН. роЪрпЗрооро┐рокрпНрокрпБ, роорпБродро▓рпАроЯрпБ роЕро▓рпНро▓родрпБ роХроЯройрпН рокро▒рпНро▒ро┐ роХрпЗро│рпБроЩрпНроХро│рпН.',
      en: 'I\'m here to help with your financial questions. Please ask about savings, investments, or loans.',
      bn: 'ржЖржорж┐ ржЖржкржирж╛рж░ ржЖрж░рзНржерж┐ржХ рж╕рж╣рж╛ржпрж╝рждрж╛рж░ ржЬржирзНржп ржПржЦрж╛ржирзЗ ржЖржЫрж┐ред ржЕржирзБржЧрзНрж░рж╣ ржХрж░рзЗ рж╕ржЮрзНржЪржпрж╝, ржмрж┐ржирж┐ржпрж╝рзЛржЧ ржмрж╛ ржЛржг рж╕ржорзНржкрж░рзНржХрзЗ ржЬрж┐ржЬрзНржЮрж╛рж╕рж╛ ржХрж░рзБржиред',
      gu: 'рк╣рлБркВ ркдркорк╛рк░рлА ркирк╛ркгрк╛ркХрлАркп рк╕рк╣рк╛ркпркдрк╛ ркорк╛ркЯрлЗ ркЕрк╣рлАркВ ркЫрлБркВ. ркХрлГрккрк╛ ркХрк░рлАркирлЗ ркмркЪркд, рк░рлЛркХрк╛ркг ркЕркерк╡рк╛ рк▓рлЛрки рк╡рк┐рк╢рлЗ рккрлВркЫрлЛ.'
    };

    return fallbackResponses[language] || fallbackResponses.en;
  }

  async startVoiceRecognition(): Promise<string> {
    return new Promise((resolve, reject) => {
      if (!this.recognition) {
        reject('Speech recognition not supported');
        return;
      }

      this.recognition.lang = this.getRecognitionLanguage(this.currentLanguage);
      this.isListening = true;

      this.recognition.onresult = (event: any) => {
        let finalTranscript = '';
        for (let i = event.resultIndex; i < event.results.length; i++) {
          if (event.results[i].isFinal) {
            finalTranscript += event.results[i][0].transcript;
          }
        }
        if (finalTranscript.trim()) {
          this.isListening = false;
          resolve(finalTranscript.trim());
        }
      };

      this.recognition.onerror = (event: any) => {
        this.isListening = false;
        reject(`Speech recognition error: ${event.error}`);
      };

      this.recognition.onend = () => {
        this.isListening = false;
      };

      this.recognition.start();
    });
  }

  async speak(text: string, language: string): Promise<void> {
    return new Promise((resolve) => {
      if (!this.synthesis) {
        resolve();
        return;
      }

      const utterance = new SpeechSynthesisUtterance(text);
      utterance.lang = this.getRecognitionLanguage(language);
      utterance.rate = 0.9;
      utterance.pitch = 1.0;
      utterance.volume = 1.0;

      utterance.onend = () => resolve();
      utterance.onerror = () => resolve();

      this.synthesis.speak(utterance);
    });
  }

  setLanguage(language: string) {
    this.currentLanguage = language;
    if (this.recognition) {
      this.recognition.lang = this.getRecognitionLanguage(language);
    }
  }

  stopListening() {
    if (this.recognition && this.isListening) {
      this.recognition.stop();
      this.isListening = false;
    }
  }
}

const VoiceAssistant: React.FC<VoiceAssistantProps> = ({ isOpen, onToggle }) => {
  const [isListening, setIsListening] = useState(false);
  const [isConnected, setIsConnected] = useState(false);
  const [messages, setMessages] = useState<Message[]>([]);
  const [inputText, setInputText] = useState('');
  const [currentLanguage, setCurrentLanguage] = useState('hi');
  const [isLoading, setIsLoading] = useState(false);
  const [showLanguageSelector, setShowLanguageSelector] = useState(false);
  const [voiceStatus, setVoiceStatus] = useState('Ready');
  
  const assistantRef = useRef<SimpleFinancialAssistant | null>(null);
  const chatContainerRef = useRef<HTMLDivElement>(null);

  // Initialize assistant when component mounts
  useEffect(() => {
    if (isOpen && !assistantRef.current) {
      // Initialize with demo API key - replace with real one
      assistantRef.current = new SimpleFinancialAssistant(
        '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', // Replace with actual OpenAI API key
        currentLanguage
      );
    }
  }, [isOpen, currentLanguage]);

  // Auto-scroll to bottom when messages change
  useEffect(() => {
    if (chatContainerRef.current) {
      chatContainerRef.current.scrollTop = chatContainerRef.current.scrollHeight;
    }
  }, [messages]);

  const addMessage = (content: string, type: 'user' | 'assistant') => {
    setMessages(prev => [...prev, {
      type,
      content,
      timestamp: new Date(),
      language: currentLanguage
    }]);
  };

  const handleConnect = () => {
    setIsConnected(!isConnected);
    if (!isConnected) {
      const welcomeMessages: { [key: string]: string } = {
        hi: 'рдирдорд╕реНрддреЗ! рдореИрдВ рдЖрдкрдХрд╛ рд╡рд┐рддреНрддреАрдп рд╕рд╣рд╛рдпрдХ рд╣реВрдВред рдореИрдВ рдмрдЪрдд, рдмрдЬрдЯ, рдХреНрд░реЗрдбрд┐рдЯ рд╕реНрдХреЛрд░ рдХреЗ рдмрд╛рд░реЗ рдореЗрдВ рдорджрдж рдХрд░ рд╕рдХрддрд╛ рд╣реВрдВред',
        te: 'р░ир░ор░╕р▒Нр░Хр░╛р░░р░В! р░ир▒Зр░ир▒Б р░ор▒А р░Жр░░р▒Нр░ер░┐р░Х р░╕р░╣р░╛р░пр░Хр▒Бр░бр░┐р░ир░┐. р░ир▒Зр░ир▒Б р░кр▒Кр░жр▒Бр░кр▒Б, р░мр░бр▒Нр░Ьр▒Жр░Яр▒Н, р░Хр▒Нр░░р▒Жр░бр░┐р░Яр▒Н р░╕р▒Нр░Хр▒Лр░░р▒Н р░Чр▒Бр░░р░┐р░Вр░Ър░┐ р░╕р░╣р░╛р░пр░В р░Ър▒Зр░пр░Чр░▓р░ир▒Б.',
        ta: 'ро╡рогроХрпНроХроорпН! роиро╛ройрпН роЙроЩрпНроХро│рпН роиро┐родро┐ роЙродро╡ро┐ропро╛ро│ро░рпН. роЪрпЗрооро┐рокрпНрокрпБ, рокроЯрпНроЬрпЖроЯрпН, роХро┐ро░рпЖроЯро┐роЯрпН ро╕рпНроХрпЛро░рпН рокро▒рпНро▒ро┐ роЙродро╡ роорпБроЯро┐ропрпБроорпН.',
        en: 'Hello! I\'m your financial assistant. I can help with savings, budgets, credit scores, and more.',
        bn: 'ржиржорж╕рзНржХрж╛рж░! ржЖржорж┐ ржЖржкржирж╛рж░ ржЖрж░рзНржерж┐ржХ рж╕рж╣рж╛ржпрж╝ржХред ржЖржорж┐ рж╕ржЮрзНржЪржпрж╝, ржмрж╛ржЬрзЗржЯ, ржХрзНрж░рзЗржбрж┐ржЯ рж╕рзНржХрзЛрж░ ржирж┐ржпрж╝рзЗ рж╕рж╛рж╣рж╛ржпрзНржп ржХрж░рждрзЗ ржкрж╛рж░рж┐ред',
        gu: 'ркиркорк╕рлНркдрлЗ! рк╣рлБркВ ркдркорк╛рк░рлЛ ркирк╛ркгрк╛ркХрлАркп рк╕рк╣рк╛ркпркХ ркЫрлБркВред рк╣рлБркВ ркмркЪркд, ркмркЬрлЗркЯ, ркХрлНрк░рлЗркбрк┐ркЯ рк╕рлНркХрлЛрк░ рк╡рк┐рк╢рлЗ ркоркжркж ркХрк░рлА рк╢ркХрлБркВ ркЫрлБркВ.'
      };
      
      addMessage(welcomeMessages[currentLanguage] || welcomeMessages.en, 'assistant');
    }
  };

  const toggleListening = async () => {
    if (!assistantRef.current) return;

    try {
      if (isListening) {
        assistantRef.current.stopListening();
        setIsListening(false);
        setVoiceStatus('Ready');
      } else {
        setVoiceStatus('Listening...');
        setIsListening(true);
        
        const transcript = await assistantRef.current.startVoiceRecognition();
        addMessage(transcript, 'user');
        
        setVoiceStatus('Processing...');
        setIsLoading(true);
        
        const response = await assistantRef.current.chat(transcript, currentLanguage);
        addMessage(response, 'assistant');
        
        setVoiceStatus('Speaking...');
        await assistantRef.current.speak(response, currentLanguage);
        
        setVoiceStatus('Ready');
        setIsListening(false);
        setIsLoading(false);
      }
    } catch (error) {
      console.error('Voice error:', error);
      setVoiceStatus('Error');
      setIsListening(false);
      setIsLoading(false);
      addMessage('рдорд╛рдЗрдХреНрд░реЛрдлреЛрди рдХреА рдЕрдиреБрдорддрд┐ рджреЗрдВ / Please allow microphone access', 'assistant');
    }
  };

  const sendMessage = async () => {
    if (!inputText.trim() || !assistantRef.current) return;

    const userMessage = inputText;
    setInputText('');
    addMessage(userMessage, 'user');
    setIsLoading(true);

    try {
      const response = await assistantRef.current.chat(userMessage, currentLanguage);
      addMessage(response, 'assistant');
    } catch (error) {
      console.error('Send message error:', error);
      addMessage('Error processing message', 'assistant');
    } finally {
      setIsLoading(false);
    }
  };

  const changeLanguage = (langCode: string) => {
    setCurrentLanguage(langCode);
    setShowLanguageSelector(false);
    
    if (assistantRef.current) {
      assistantRef.current.setLanguage(langCode);
      
      const langChangeMessages: { [key: string]: string } = {
        hi: 'рднрд╛рд╖рд╛ рдмрджрд▓ рдЧрдИ: рд╣рд┐рдВрджреА',
        te: 'р░нр░╛р░╖ р░ор░╛р░░р▒Нр░Ър░мр░бр░┐р░Вр░жр░┐: р░др▒Жр░▓р▒Бр░Чр▒Б',
        ta: 'роорпКро┤ро┐ рооро╛ро▒рпНро▒рокрпНрокроЯрпНроЯродрпБ: родрооро┐ро┤рпН',
        en: 'Language changed to: English',
        bn: 'ржнрж╛рж╖рж╛ ржкрж░рж┐ржмрж░рзНрждрж┐ржд рж╣ржпрж╝рзЗржЫрзЗ: ржмрж╛ржВрж▓рж╛',
        gu: 'ркнрк╛рк╖рк╛ ркмркжрк▓рк╛ркИ ркЧркИ: ркЧрлБркЬрк░рк╛ркдрлА'
      };
      
      addMessage(langChangeMessages[langCode] || 'Language changed', 'assistant');
    }
  };

  const getDemoSuggestions = () => {
    const suggestions: { [key: string]: string[] } = {
      hi: [
        'рдореИрдВ рдкреИрд╕реЗ рдХреИрд╕реЗ рдмрдЪрд╛ рд╕рдХрддрд╛ рд╣реВрдВ?',
        'рдХреНрд░реЗрдбрд┐рдЯ рд╕реНрдХреЛрд░ рдХреНрдпрд╛ рд╣реИ?',
        'рд╣реЛрдо рд▓реЛрди рдХреЗ рд▓рд┐рдП рдХреИрд╕реЗ рдЕрдкреНрд▓рд╛рдИ рдХрд░реЗрдВ?'
      ],
      te: [
        'р░ир▒Зр░ир▒Б р░бр░мр▒Нр░мр▒Б р░Ор░▓р░╛ р░Жр░жр░╛ р░Ър▒Зр░пр░Чр░▓р░ир▒Б?',
        'р░Хр▒Нр░░р▒Жр░бр░┐р░Яр▒Н р░╕р▒Нр░Хр▒Лр░░р▒Н р░Ер░Вр░Яр▒З р░Пр░ор░┐р░Яр░┐?',
        'р░╣р▒Лр░ор▒Н р░▓р▒Лр░ир▒Н р░Хр▒Лр░╕р░В р░Ор░▓р░╛ р░жр░░р░Цр░╛р░╕р▒Нр░др▒Б р░Ър▒Зр░пр░╛р░▓р░┐?'
      ],
      ta: [
        'роиро╛ройрпН роОрокрпНрокроЯро┐ рокрогроорпН роЪрпЗрооро┐роХрпНроХ роорпБроЯро┐ропрпБроорпН?',
        'роХро┐ро░рпЖроЯро┐роЯрпН ро╕рпНроХрпЛро░рпН роОройрпНро▒ро╛ро▓рпН роОройрпНрой?',
        'ро╡рпАроЯрпНроЯрпБроХрпН роХроЯройрпБроХрпНроХрпБ роОро╡рпНро╡ро╛ро▒рпБ ро╡ро┐рогрпНрогрокрпНрокро┐рокрпНрокродрпБ?'
      ],
      en: [
        'How can I save money?',
        'What is a credit score?',
        'How to apply for a home loan?'
      ],
      bn: [
        'ржЖржорж┐ ржХрзАржнрж╛ржмрзЗ ржЯрж╛ржХрж╛ рж╕рж╛рж╢рзНрж░ржпрж╝ ржХрж░рждрзЗ ржкрж╛рж░рж┐?',
        'ржХрзНрж░рзЗржбрж┐ржЯ рж╕рзНржХрзЛрж░ ржХрзА?',
        'рж╣рзЛржо рж▓рзЛржирзЗрж░ ржЬржирзНржп ржХрзАржнрж╛ржмрзЗ ржЖржмрзЗржжржи ржХрж░ржм?'
      ],
      gu: [
        'рк╣рлБркВ рккрлИрк╕рк╛ ркХрлЗрк╡рлА рк░рлАркдрлЗ ркмркЪрк╛рк╡рлА рк╢ркХрлБркВ?',
        'ркХрлНрк░рлЗркбрк┐ркЯ рк╕рлНркХрлЛрк░ рк╢рлБркВ ркЫрлЗ?',
        'рк╣рлЛрко рк▓рлЛрки ркорк╛ркЯрлЗ ркХрлЗрк╡рлА рк░рлАркдрлЗ ркЕрк░ркЬрлА ркХрк░рк╡рлА?'
      ]
    };
    
    return suggestions[currentLanguage] || suggestions.en;
  };

  if (!isOpen) {
    return (
      <Button
        onClick={onToggle}
        className={cn(
          "fixed bottom-6 right-6 h-16 w-16 rounded-full shadow-lg transition-all duration-300 hover:scale-110",
          "bg-gradient-to-r from-blue-500 to-purple-600 hover:from-blue-600 hover:to-purple-700",
          "border-2 border-white/20"
        )}
        size="icon"
      >
        <Phone className="h-6 w-6 text-white" />
      </Button>
    );
  }

  return (
    <Card className="fixed bottom-6 right-6 w-80 h-[500px] bg-gray-900 border-gray-700 shadow-2xl animate-scale-in">
      <div className="flex flex-col h-full">
        {/* Header */}
        <div className="p-4 border-b border-gray-700 bg-gradient-to-r from-blue-600 to-purple-600 rounded-t-lg">
          <div className="flex items-center justify-between">
            <div className="flex items-center gap-2">
              <div className={cn(
                "w-3 h-3 rounded-full",
                isConnected ? "bg-green-400 animate-pulse" : "bg-red-400"
              )} />
              <span className="text-white font-medium">Financial Saathi</span>
            </div>
            <div className="flex items-center gap-2">
              <Button
                onClick={() => setShowLanguageSelector(!showLanguageSelector)}
                variant="ghost"
                size="sm"
                className="text-white hover:bg-white/20"
              >
                <Globe className="h-4 w-4" />
              </Button>
              <Button
                onClick={onToggle}
                variant="ghost"
                size="sm"
                className="text-white hover:bg-white/20"
              >
                <PhoneOff className="h-4 w-4" />
              </Button>
            </div>
          </div>
          
          {/* Language Selector */}
          {showLanguageSelector && (
            <div className="mt-2 grid grid-cols-2 gap-1">
              {LANGUAGES.map((lang) => (
                <Button
                  key={lang.code}
                  onClick={() => changeLanguage(lang.code)}
                  variant="ghost"
                  size="sm"
                  className={cn(
                    "text-xs text-white hover:bg-white/20",
                    currentLanguage === lang.code && "bg-white/20"
                  )}
                >
                  {lang.flag} {lang.name}
                </Button>
              ))}
            </div>
          )}
          
          {/* Voice Status */}
          <div className="mt-2 text-xs text-white/80">
            {voiceStatus}
          </div>
        </div>

        {/* Chat Messages */}
        <div 
          ref={chatContainerRef}
          className="flex-1 p-4 overflow-y-auto space-y-3"
        >
          {messages.length === 0 && isConnected && (
            <div className="space-y-2">
              <div className="text-gray-400 text-sm">Try these demo questions:</div>
              {getDemoSuggestions().map((suggestion, index) => (
                <Button
                  key={index}
                  onClick={() => setInputText(suggestion)}
                  variant="outline"
                  size="sm"
                  className="w-full text-left border-gray-600 text-gray-300 hover:bg-gray-700 text-xs"
                >
                  {suggestion}
                </Button>
              ))}
            </div>
          )}
          
          {messages.map((message, index) => (
            <div
              key={index}
              className={cn(
                "flex",
                message.type === 'user' ? "justify-end" : "justify-start"
              )}
            >
              <div
                className={cn(
                  "max-w-[80%] p-3 rounded-lg text-sm",
                  message.type === 'user'
                    ? "bg-blue-600 text-white"
                    : "bg-gray-800 text-gray-100 border border-gray-700"
                )}
              >
                {message.content}
                <div className="text-xs mt-1 opacity-60">
                  {message.timestamp.toLocaleTimeString()}
                </div>
              </div>
            </div>
          ))}
          
          {isLoading && (
            <div className="flex justify-start">
              <div className="bg-gray-800 text-gray-100 border border-gray-700 p-3 rounded-lg text-sm">
                <div className="flex items-center gap-2">
                  <div className="w-2 h-2 bg-blue-500 rounded-full animate-bounce"></div>
                  <div className="w-2 h-2 bg-blue-500 rounded-full animate-bounce" style={{animationDelay: '0.1s'}}></div>
                  <div className="w-2 h-2 bg-blue-500 rounded-full animate-bounce" style={{animationDelay: '0.2s'}}></div>
                  <span className="text-xs">Thinking...</span>
                </div>
              </div>
            </div>
          )}
        </div>

        {/* Controls */}
        <div className="p-4 border-t border-gray-700">
          <div className="flex gap-2 mb-3">
            <Button
              onClick={handleConnect}
              variant={isConnected ? "default" : "outline"}
              size="sm"
              className={cn(
                isConnected 
                  ? "bg-green-600 hover:bg-green-700" 
                  : "border-gray-600 text-gray-300"
              )}
            >
              {isConnected ? 'Connected' : 'Connect'}
            </Button>
            <Button
              onClick={toggleListening}
              variant="outline"
              size="sm"
              className={cn(
                "border-gray-600",
                isListening 
                  ? "bg-red-600 text-white border-red-600 animate-pulse" 
                  : "text-gray-300"
              )}
              disabled={!isConnected}
            >
              {isListening ? <MicOff className="h-4 w-4" /> : <Mic className="h-4 w-4" />}
            </Button>
            <Button 
              variant="outline" 
              size="sm" 
              className="border-gray-600 text-gray-300" 
              disabled={!isConnected}
              onClick={() => {
                if (assistantRef.current) {
                  const demoText = currentLanguage === 'hi' 
                    ? 'рдпрд╣ рдПрдХ рдбреЗрдореЛ рд╣реИред рдЖрд╡рд╛рдЬрд╝ рдХреА рдЬрд╛рдБрдЪ рд╣реЛ рд░рд╣реА рд╣реИред'
                    : 'This is a demo. Voice test in progress.';
                  assistantRef.current.speak(demoText, currentLanguage);
                }
              }}
            >
              <Volume2 className="h-4 w-4" />
            </Button>
          </div>
          
          <div className="flex gap-2">
            <input
              type="text"
              value={inputText}
              onChange={(e) => setInputText(e.target.value)}
              onKeyPress={(e) => e.key === 'Enter' && sendMessage()}
              placeholder={
                currentLanguage === 'hi' ? 'рдЕрдкрдирд╛ рд╕рд╡рд╛рд▓ рд▓рд┐рдЦреЗрдВ...' :
                currentLanguage === 'te' ? 'р░ор▒А р░кр▒Нр░░р░╢р▒Нр░и р░░р░╛р░пр░Вр░бр░┐...' :
                currentLanguage === 'ta' ? 'роЙроЩрпНроХро│рпН роХрпЗро│рпНро╡ро┐ропрпИ роОро┤рпБродрпБроЩрпНроХро│рпН...' :
                'Type your message...'
              }
              className="flex-1 px-3 py-2 bg-gray-800 border border-gray-600 rounded-md text-gray-100 text-sm focus:outline-none focus:border-blue-500"
              disabled={!isConnected}
            />
            <Button 
              onClick={sendMessage}
              size="sm"
              disabled={!isConnected || !inputText.trim() || isLoading}
              className="bg-blue-600 hover:bg-blue-700"
            >
              <MessageSquare className="h-4 w-4" />
            </Button>
          </div>
        </div>
      </div>
    </Card>
  );
};

export default VoiceAssistant;